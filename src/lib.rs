/* automatically generated by rust-bindgen */

use ::std::os::raw::*;
use ::std::option::{Option};

/// data types
pub type Id = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Data {
    pub value: u64,
    pub ptr: *mut c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Data() {
    assert_eq!(
        ::std::mem::size_of::<Data>(),
        8usize,
        concat!("Size of: ", stringify!(Data))
    );
    assert_eq!(
        ::std::mem::align_of::<Data>(),
        8usize,
        concat!("Alignment of ", stringify!(Data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Data>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Data),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Data>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Data),
            "::",
            stringify!(ptr)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}DataNone"]
    pub static mut DataNone: Data;
}
pub type OmpWaitId = u64;
pub const OMP_WAIT_ID_NONE: OmpWaitId = 0;
pub type Device = c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OmpFrame {
    pub exit_frame: *mut c_void,
    pub enter_frame: *mut c_void,
}
#[test]
fn bindgen_test_layout_OmpFrame() {
    assert_eq!(
        ::std::mem::size_of::<OmpFrame>(),
        16usize,
        concat!("Size of: ", stringify!(OmpFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<OmpFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(OmpFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OmpFrame>())).exit_frame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OmpFrame),
            "::",
            stringify!(exit_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OmpFrame>())).enter_frame as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OmpFrame),
            "::",
            stringify!(enter_frame)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TaskDependenceFlag {
    Out = 1,
    In = 2,
    Inout = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TaskDependence {
    pub variable_addr: *mut c_void,
    pub dependence_flags: c_uint,
}
#[test]
fn bindgen_test_layout_TaskDependence() {
    assert_eq!(
        ::std::mem::size_of::<TaskDependence>(),
        16usize,
        concat!("Size of: ", stringify!(TaskDependence))
    );
    assert_eq!(
        ::std::mem::align_of::<TaskDependence>(),
        8usize,
        concat!("Alignment of ", stringify!(TaskDependence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TaskDependence>())).variable_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TaskDependence),
            "::",
            stringify!(variable_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TaskDependence>())).dependence_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TaskDependence),
            "::",
            stringify!(dependence_flags)
        )
    );
}
#[repr(u32)]
/// enumerations for thread states and runtime events
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum OmpState {
    Undefined = 258,
    WorkSerial = 0,
    WorkParallel = 1,
    WorkReduction = 2,
    WaitBarrier = 16,
    WaitBarrierImplicitParallel = 17,
    WaitBarrierImplicitWorkshare = 18,
    WaitBarrierImplicit = 19,
    WaitBarrierExplicit = 20,
    WaitTaskwait = 32,
    WaitTaskgroup = 33,
    WaitMutex = 64,
    WaitLock = 65,
    WaitCritical = 66,
    WaitAtomic = 67,
    WaitOrdered = 68,
    WaitTarget = 128,
    WaitTargetMap = 129,
    WaitTargetUpdate = 130,
    Idle = 256,
    Overhead = 257,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Callbacks {
    ThreadBegin = 1,
    ThreadEnd = 2,
    ParallelBegin = 3,
    ParallelEnd = 4,
    TaskCreate = 5,
    TaskSchedule = 6,
    ImplicitTask = 7,
    Target = 8,
    TargetDataOp = 9,
    TargetSubmit = 10,
    ControlTool = 11,
    DeviceInitialize = 12,
    DeviceFinalize = 13,
    DeviceLoad = 14,
    DeviceUnload = 15,
    SyncRegionWait = 16,
    MutexReleased = 17,
    TaskDependences = 18,
    TaskDependence = 19,
    Work = 20,
    Master = 21,
    TargetMap = 22,
    SyncRegion = 23,
    LockInit = 24,
    LockDestroy = 25,
    MutexAcquire = 26,
    MutexAcquired = 27,
    NestLock = 28,
    Flush = 29,
    Cancel = 30,
    Idle = 31,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SetResultFn {
    Error = 0,
    Never = 1,
    Sometimes = 2,
    SometimesPaired = 3,
    Always = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum KmpMutexImpl {
    Unknown = 0,
    Spin = 1,
    Queuing = 2,
    Speculative = 3,
}
/// callback signatures
pub type InterfaceFn = Option<unsafe extern "C" fn()>;
pub type FunctionLookupFn = Option<
    unsafe extern "C" fn(arg1: *const c_char) -> InterfaceFn,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ThreadType {
    ThreadInitial = 1,
    ThreadWorker = 2,
    ThreadOther = 3,
    ThreadUnknown = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Invoker {
    InvokerProgram = 1,
    InvokerRuntime = 2,
}
pub type CallbackThreadBeginFn = Option<
    unsafe extern "C" fn(thread_type: ThreadType, thread_data: *mut Data),
>;
pub type CallbackThreadEndFn =
    Option<unsafe extern "C" fn(thread_data: *mut Data)>;
pub type WaitCallback = Option<unsafe extern "C" fn(wait_id: OmpWaitId)>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ScopeEndpoint {
    Begin = 1,
    End = 2,
}
pub type CallbackImplicitTaskFn = Option<
    unsafe extern "C" fn(
        endpoint: ScopeEndpoint,
        parallel_data: *mut Data,
        task_data: *mut Data,
        team_size: c_uint,
        thread_num: c_uint,
    ),
>;
pub type CallbackParallelBeginFn = Option<
    unsafe extern "C" fn(
        encountering_task_data: *mut Data,
        encountering_task_frame: *const OmpFrame,
        parallel_data: *mut Data,
        requested_team_size: c_uint,
        invoker: Invoker,
        codeptr_ra: *const c_void,
    ),
>;
pub type CallbackParallelEndFn = Option<
    unsafe extern "C" fn(
        parallel_data: *mut Data,
        encountering_task_data: *mut Data,
        invoker: Invoker,
        codeptr_ra: *const c_void,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TaskType {
    Initial = 1,
    Implicit = 2,
    Explicit = 4,
    Target = 8,
    Undeferred = 134217728,
    Untied = 268435456,
    Final = 536870912,
    Mergeable = 1073741824,
    Merged = 2147483648,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TaskStatus {
    TaskComplete = 1,
    Yield = 2,
    TaskCancel = 3,
    Others = 4,
}
pub type CallbackTaskScheduleFn = Option<
    unsafe extern "C" fn(
        prior_task_data: *mut Data,
        prior_task_status: TaskStatus,
        next_task_data: *mut Data,
    ),
>;
pub type CallbackTaskCreateFn = Option<
    unsafe extern "C" fn(
        encountering_task_data: *mut Data,
        encountering_task_frame: *const OmpFrame,
        new_task_data: *mut Data,
        type_: c_int,
        has_dependences: c_int,
        codeptr_ra: *const c_void,
    ),
>;
pub type CallbackTaskDependencesFn = Option<
    unsafe extern "C" fn(
        task_data: *mut Data,
        deps: *const TaskDependence,
        ndeps: c_int,
    ),
>;
pub type CallbackTaskDependenceFn = Option<
    unsafe extern "C" fn(src_task_data: *mut Data, sink_task_data: *mut Data),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TargetType {
    Target = 1,
    TargetEnterData = 2,
    TargetExitData = 3,
    Update = 4,
}
pub type CallbackTargetFn = Option<
    unsafe extern "C" fn(
        kind: TargetType,
        endpoint: ScopeEndpoint,
        device_num: u64,
        task_data: *mut Data,
        target_id: Id,
        codeptr_ra: *const c_void,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TargetDataOp {
    TargetDataAlloc = 1,
    TargetDataTransferToDev = 2,
    TargetDataTransferFromDev = 3,
    TargetDataDelete = 4,
}
pub type CallbackTargetDataOpFn = Option<
    unsafe extern "C" fn(
        target_id: Id,
        host_op_id: Id,
        optype: TargetDataOp,
        host_addr: *mut c_void,
        device_addr: *mut c_void,
        bytes: usize,
    ),
>;
pub type CallbackTargetSubmitFn =
    Option<unsafe extern "C" fn(target_id: Id, host_op_id: Id)>;
pub type CallbackTargetMapFn = Option<
    unsafe extern "C" fn(
        target_id: Id,
        nitems: c_uint,
        host_addr: *mut *mut c_void,
        device_addr: *mut *mut c_void,
        bytes: *mut usize,
        mapping_flags: *mut c_uint,
    ),
>;
pub type CallbackDeviceInitializeFn = Option<
    unsafe extern "C" fn(
        device_num: u64,
        type_: *const c_char,
        device: *mut Device,
        lookup: FunctionLookupFn,
        documentation: *const c_char,
    ),
>;
pub type CallbackDeviceFinalizeFn =
    Option<unsafe extern "C" fn(device_num: u64)>;
pub type CallbackDeviceLoadFn = Option<
    unsafe extern "C" fn(
        device_num: u64,
        filename: *const c_char,
        offset_in_file: i64,
        vma_in_file: *mut c_void,
        bytes: usize,
        host_addr: *mut c_void,
        device_addr: *mut c_void,
        module_id: u64,
    ),
>;
pub type CallbackDeviceUnloadFn =
    Option<unsafe extern "C" fn(device_num: u64, module_id: u64)>;
pub type CallbackControlToolFn = Option<
    unsafe extern "C" fn(
        command: u64,
        modifier: u64,
        arg: *mut c_void,
        codeptr_ra: *const c_void,
    ) -> c_int,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MutexKind {
    Mutex = 16,
    Lock = 17,
    NestLock = 18,
    Critical = 19,
    Atomic = 20,
    Ordered = 32,
}
pub type CallbackMutexAcquireFn = Option<
    unsafe extern "C" fn(
        kind: MutexKind,
        hint: c_uint,
        impl_: c_uint,
        wait_id: OmpWaitId,
        codeptr_ra: *const c_void,
    ),
>;
pub type CallbackMutexFn = Option<
    unsafe extern "C" fn(
        kind: MutexKind,
        wait_id: OmpWaitId,
        codeptr_ra: *const c_void,
    ),
>;
pub type CallbackNestLockFn = Option<
    unsafe extern "C" fn(
        endpoint: ScopeEndpoint,
        wait_id: OmpWaitId,
        codeptr_ra: *const c_void,
    ),
>;
pub type CallbackMasterFn = Option<
    unsafe extern "C" fn(
        endpoint: ScopeEndpoint,
        parallel_data: *mut Data,
        task_data: *mut Data,
        codeptr_ra: *const c_void,
    ),
>;
pub type CallbackIdleFn =
    Option<unsafe extern "C" fn(endpoint: ScopeEndpoint)>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum WorkType {
    Loop = 1,
    Sections = 2,
    SingleExecutor = 3,
    SingleOther = 4,
    Workshare = 5,
    Distribute = 6,
    Taskloop = 7,
}
pub type CallbackWorkFn = Option<
    unsafe extern "C" fn(
        wstype: WorkType,
        endpoint: ScopeEndpoint,
        parallel_data: *mut Data,
        task_data: *mut Data,
        count: u64,
        codeptr_ra: *const c_void,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum SyncRegionKind {
    Barrier = 1,
    Taskwait = 2,
    Taskgroup = 3,
}
pub type CallbackSyncRegionFn = Option<
    unsafe extern "C" fn(
        kind: SyncRegionKind,
        endpoint: ScopeEndpoint,
        parallel_data: *mut Data,
        task_data: *mut Data,
        codeptr_ra: *const c_void,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum CancelFlag {
    Parallel = 1,
    Sections = 2,
    Do = 4,
    Taskgroup = 8,
    Activated = 16,
    Detected = 32,
    DiscardedTask = 64,
}
pub type CallbackCancelFn = Option<
    unsafe extern "C" fn(
        task_data: *mut Data,
        flags: c_int,
        codeptr_ra: *const c_void,
    ),
>;
pub type CallbackFlushFn = Option<
    unsafe extern "C" fn(thread_data: *mut Data, codeptr_ra: *const c_void),
>;
pub type GetState =
    Option<unsafe extern "C" fn(wait_id: *mut OmpWaitId) -> OmpState>;
pub type GetThreadData = Option<unsafe extern "C" fn() -> *mut Data>;
pub type GetParallelInfo = Option<
    unsafe extern "C" fn(
        ancestor_level: c_int,
        parallel_data: *mut *mut Data,
        team_size: *mut c_int,
    ) -> c_int,
>;
pub type GetTaskInfo = Option<
    unsafe extern "C" fn(
        ancestor_level: c_int,
        type_: *mut c_int,
        task_data: *mut *mut Data,
        task_frame: *mut *mut OmpFrame,
        parallel_data: *mut *mut Data,
        thread_num: *mut c_int,
    ) -> c_int,
>;
pub type GetNumProcs =
    Option<unsafe extern "C" fn() -> c_int>;
pub type GetNumPlaces =
    Option<unsafe extern "C" fn() -> c_int>;
pub type GetPlaceProcIds = Option<
    unsafe extern "C" fn(
        place_num: c_int,
        ids_size: c_int,
        ids: *mut c_int,
    ) -> c_int,
>;
pub type GetPlaceNum =
    Option<unsafe extern "C" fn() -> c_int>;
pub type GetPartitionPlaceNums = Option<
    unsafe extern "C" fn(
        place_nums_size: c_int,
        place_nums: *mut c_int,
    ) -> c_int,
>;
pub type GetProcId =
    Option<unsafe extern "C" fn() -> c_int>;
pub type InitializeFn = Option<
    unsafe extern "C" fn(FnLookup: FunctionLookupFn, tool_data: *mut Data)
        -> c_int,
>;
pub type FinalizeFn = Option<unsafe extern "C" fn(tool_data: *mut Data)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StartToolResult {
    pub initialize: InitializeFn,
    pub finalize: FinalizeFn,
    pub tool_data: Data,
}
#[test]
fn bindgen_test_layout_StartToolResult() {
    assert_eq!(
        ::std::mem::size_of::<StartToolResult>(),
        24usize,
        concat!("Size of: ", stringify!(StartToolResult))
    );
    assert_eq!(
        ::std::mem::align_of::<StartToolResult>(),
        8usize,
        concat!("Alignment of ", stringify!(StartToolResult))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<StartToolResult>())).initialize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StartToolResult),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<StartToolResult>())).finalize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StartToolResult),
            "::",
            stringify!(finalize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<StartToolResult>())).tool_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StartToolResult),
            "::",
            stringify!(tool_data)
        )
    );
}
extern "C" {
    pub fn start_tool(
        OmpVersion: c_uint,
        runtime_version: *const c_char,
    ) -> *mut StartToolResult;
}
pub type CallbackFn = Option<unsafe extern "C" fn()>;
pub type SetCallbackFn = Option<
    unsafe extern "C" fn(which: Callbacks, callback: CallbackFn)
        -> c_int,
>;
pub type GetCallback = Option<
    unsafe extern "C" fn(which: Callbacks, callback: *mut CallbackFn)
        -> c_int,
>;
pub type EnumerateStates = Option<
    unsafe extern "C" fn(
        current_state: c_int,
        next_state: *mut c_int,
        next_state_name: *mut *const c_char,
    ) -> c_int,
>;
pub type EnumerateMutexImpls = Option<
    unsafe extern "C" fn(
        current_impl: c_int,
        next_impl: *mut c_int,
        next_impl_name: *mut *const c_char,
    ) -> c_int,
>;
pub type GetUniqueId = Option<unsafe extern "C" fn() -> u64>;
pub type GetTargetInfo = Option<
    unsafe extern "C" fn(
        device_num: *mut u64,
        target_id: *mut Id,
        host_op_id: *mut Id,
    ) -> c_int,
>;
pub type GetNumDevices =
    Option<unsafe extern "C" fn() -> c_int>;
